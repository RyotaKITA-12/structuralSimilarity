digraph {
	0 [label="0
Module
import re
import tweepy

def main():
    CK = 'Wl0lFuMC3Qd00UiaW2otSPb5v'
    CKS = 'UvM1JF2JfJWwIvZmbYWQpIme8WIkc0Jnc9G26kwcbcZuUJuLTS'
    AT = '1257360054853890049-NIaR8TnRD1PQRHN47Ld4ZYk0XkLDxE'
    ATS = 'M0hDSNsFsg2lyCDSZfiyE0ZqbFmgn6FzbzW4GHHaCz3aK'
    n = 50000
    pages = list(range(1, int(n / 200) + 1))
    user_name = 'euph_ine'
    tweets = search_user(CK, CKS, AT, ATS, pages, user_name)
    for tweet in tweets:
        with open('./data/' + user_name + '.txt', mode='a') as f:
            tweet = re.sub('[^ぁ-んァ-ン一-龥 ー]+', '', tweet)
            f.write(tweet + '\n')

def search_user(CK, CKS, AT, ATS, pages, user_name):
    auth = tweepy.OAuthHandler(CK, CKS)
    auth.set_access_token(AT, ATS)
    api = tweepy.API(auth)
    tweets = []
    for page in pages:
        results = api.user_timeline(screen_name=user_name, count=200, page=page)
        for tweet in results:
            tweet = tweet.text
            tweets.append(tweet)
    return tweets
if __name__ == '__main__':
    main()"]
	1 [label="1
Import
import re"]
	0 -> 1
	2 [label="2
alias
re"]
	1 -> 2
	3 [label="3
Import
import tweepy"]
	0 -> 3
	4 [label="4
alias
tweepy"]
	3 -> 4
	5 [label="5
FunctionDef
def main():
    CK = 'Wl0lFuMC3Qd00UiaW2otSPb5v'
    CKS = 'UvM1JF2JfJWwIvZmbYWQpIme8WIkc0Jnc9G26kwcbcZuUJuLTS'
    AT = '1257360054853890049-NIaR8TnRD1PQRHN47Ld4ZYk0XkLDxE'
    ATS = 'M0hDSNsFsg2lyCDSZfiyE0ZqbFmgn6FzbzW4GHHaCz3aK'
    n = 50000
    pages = list(range(1, int(n / 200) + 1))
    user_name = 'euph_ine'
    tweets = search_user(CK, CKS, AT, ATS, pages, user_name)
    for tweet in tweets:
        with open('./data/' + user_name + '.txt', mode='a') as f:
            tweet = re.sub('[^ぁ-んァ-ン一-龥 ー]+', '', tweet)
            f.write(tweet + '\n')"]
	0 -> 5
	6 [label="6
arguments
"]
	5 -> 6
	7 [label="7
Assign
CK = 'Wl0lFuMC3Qd00UiaW2otSPb5v'"]
	5 -> 7
	8 [label="8
Name
CK"]
	7 -> 8
	9 [label="9
Store
"]
	8 -> 9
	10 [label="10
Constant
'Wl0lFuMC3Qd00UiaW2otSPb5v'"]
	7 -> 10
	11 [label="11
Assign
CKS = 'UvM1JF2JfJWwIvZmbYWQpIme8WIkc0Jnc9G26kwcbcZuUJuLTS'"]
	5 -> 11
	12 [label="12
Name
CKS"]
	11 -> 12
	13 [label="13
Store
"]
	12 -> 13
	14 [label="14
Constant
'UvM1JF2JfJWwIvZmbYWQpIme8WIkc0Jnc9G26kwcbcZuUJuLTS'"]
	11 -> 14
	15 [label="15
Assign
AT = '1257360054853890049-NIaR8TnRD1PQRHN47Ld4ZYk0XkLDxE'"]
	5 -> 15
	16 [label="16
Name
AT"]
	15 -> 16
	17 [label="17
Store
"]
	16 -> 17
	18 [label="18
Constant
'1257360054853890049-NIaR8TnRD1PQRHN47Ld4ZYk0XkLDxE'"]
	15 -> 18
	19 [label="19
Assign
ATS = 'M0hDSNsFsg2lyCDSZfiyE0ZqbFmgn6FzbzW4GHHaCz3aK'"]
	5 -> 19
	20 [label="20
Name
ATS"]
	19 -> 20
	21 [label="21
Store
"]
	20 -> 21
	22 [label="22
Constant
'M0hDSNsFsg2lyCDSZfiyE0ZqbFmgn6FzbzW4GHHaCz3aK'"]
	19 -> 22
	23 [label="23
Assign
n = 50000"]
	5 -> 23
	24 [label="24
Name
n"]
	23 -> 24
	25 [label="25
Store
"]
	24 -> 25
	26 [label="26
Constant
50000"]
	23 -> 26
	27 [label="27
Assign
pages = list(range(1, int(n / 200) + 1))"]
	5 -> 27
	28 [label="28
Name
pages"]
	27 -> 28
	29 [label="29
Store
"]
	28 -> 29
	30 [label="30
Call
list(range(1, int(n / 200) + 1))"]
	27 -> 30
	31 [label="31
Name
list"]
	30 -> 31
	32 [label="32
Load
"]
	31 -> 32
	33 [label="33
Call
range(1, int(n / 200) + 1)"]
	30 -> 33
	34 [label="34
Name
range"]
	33 -> 34
	35 [label="35
Load
"]
	34 -> 35
	36 [label="36
Constant
1"]
	33 -> 36
	37 [label="37
BinOp
int(n / 200) + 1"]
	33 -> 37
	38 [label="38
Call
int(n / 200)"]
	37 -> 38
	39 [label="39
Name
int"]
	38 -> 39
	40 [label="40
Load
"]
	39 -> 40
	41 [label="41
BinOp
n / 200"]
	38 -> 41
	42 [label="42
Name
n"]
	41 -> 42
	43 [label="43
Load
"]
	42 -> 43
	44 [label="44
Div
"]
	41 -> 44
	45 [label="45
Constant
200"]
	41 -> 45
	46 [label="46
Add
"]
	37 -> 46
	47 [label="47
Constant
1"]
	37 -> 47
	48 [label="48
Assign
user_name = 'euph_ine'"]
	5 -> 48
	49 [label="49
Name
user_name"]
	48 -> 49
	50 [label="50
Store
"]
	49 -> 50
	51 [label="51
Constant
'euph_ine'"]
	48 -> 51
	52 [label="52
Assign
tweets = search_user(CK, CKS, AT, ATS, pages, user_name)"]
	5 -> 52
	53 [label="53
Name
tweets"]
	52 -> 53
	54 [label="54
Store
"]
	53 -> 54
	55 [label="55
Call
search_user(CK, CKS, AT, ATS, pages, user_name)"]
	52 -> 55
	56 [label="56
Name
search_user"]
	55 -> 56
	57 [label="57
Load
"]
	56 -> 57
	58 [label="58
Name
CK"]
	55 -> 58
	59 [label="59
Load
"]
	58 -> 59
	60 [label="60
Name
CKS"]
	55 -> 60
	61 [label="61
Load
"]
	60 -> 61
	62 [label="62
Name
AT"]
	55 -> 62
	63 [label="63
Load
"]
	62 -> 63
	64 [label="64
Name
ATS"]
	55 -> 64
	65 [label="65
Load
"]
	64 -> 65
	66 [label="66
Name
pages"]
	55 -> 66
	67 [label="67
Load
"]
	66 -> 67
	68 [label="68
Name
user_name"]
	55 -> 68
	69 [label="69
Load
"]
	68 -> 69
	70 [label="70
For
for tweet in tweets:
    with open('./data/' + user_name + '.txt', mode='a') as f:
        tweet = re.sub('[^ぁ-んァ-ン一-龥 ー]+', '', tweet)
        f.write(tweet + '\n')"]
	5 -> 70
	71 [label="71
Name
tweet"]
	70 -> 71
	72 [label="72
Store
"]
	71 -> 72
	73 [label="73
Name
tweets"]
	70 -> 73
	74 [label="74
Load
"]
	73 -> 74
	75 [label="75
With
with open('./data/' + user_name + '.txt', mode='a') as f:
    tweet = re.sub('[^ぁ-んァ-ン一-龥 ー]+', '', tweet)
    f.write(tweet + '\n')"]
	70 -> 75
	76 [label="76
withitem
open('./data/' + user_name + '.txt', mode='a') as f"]
	75 -> 76
	77 [label="77
Call
open('./data/' + user_name + '.txt', mode='a')"]
	76 -> 77
	78 [label="78
Name
open"]
	77 -> 78
	79 [label="79
Load
"]
	78 -> 79
	80 [label="80
BinOp
'./data/' + user_name + '.txt'"]
	77 -> 80
	81 [label="81
BinOp
'./data/' + user_name"]
	80 -> 81
	82 [label="82
Constant
'./data/'"]
	81 -> 82
	83 [label="83
Add
"]
	81 -> 83
	84 [label="84
Name
user_name"]
	81 -> 84
	85 [label="85
Load
"]
	84 -> 85
	86 [label="86
Add
"]
	80 -> 86
	87 [label="87
Constant
'.txt'"]
	80 -> 87
	88 [label="88
keyword
mode='a'"]
	77 -> 88
	89 [label="89
Constant
'a'"]
	88 -> 89
	90 [label="90
Name
f"]
	76 -> 90
	91 [label="91
Store
"]
	90 -> 91
	92 [label="92
Assign
tweet = re.sub('[^ぁ-んァ-ン一-龥 ー]+', '', tweet)"]
	75 -> 92
	93 [label="93
Name
tweet"]
	92 -> 93
	94 [label="94
Store
"]
	93 -> 94
	95 [label="95
Call
re.sub('[^ぁ-んァ-ン一-龥 ー]+', '', tweet)"]
	92 -> 95
	96 [label="96
Attribute
re.sub"]
	95 -> 96
	97 [label="97
Name
re"]
	96 -> 97
	98 [label="98
Load
"]
	97 -> 98
	99 [label="99
Load
"]
	96 -> 99
	100 [label="100
Constant
'[^ぁ-んァ-ン一-龥 ー]+'"]
	95 -> 100
	101 [label="101
Constant
''"]
	95 -> 101
	102 [label="102
Name
tweet"]
	95 -> 102
	103 [label="103
Load
"]
	102 -> 103
	104 [label="104
Expr
f.write(tweet + '\n')"]
	75 -> 104
	105 [label="105
Call
f.write(tweet + '\n')"]
	104 -> 105
	106 [label="106
Attribute
f.write"]
	105 -> 106
	107 [label="107
Name
f"]
	106 -> 107
	108 [label="108
Load
"]
	107 -> 108
	109 [label="109
Load
"]
	106 -> 109
	110 [label="110
BinOp
tweet + '\n'"]
	105 -> 110
	111 [label="111
Name
tweet"]
	110 -> 111
	112 [label="112
Load
"]
	111 -> 112
	113 [label="113
Add
"]
	110 -> 113
	114 [label="114
Constant
'\n'"]
	110 -> 114
	115 [label="115
FunctionDef
def search_user(CK, CKS, AT, ATS, pages, user_name):
    auth = tweepy.OAuthHandler(CK, CKS)
    auth.set_access_token(AT, ATS)
    api = tweepy.API(auth)
    tweets = []
    for page in pages:
        results = api.user_timeline(screen_name=user_name, count=200, page=page)
        for tweet in results:
            tweet = tweet.text
            tweets.append(tweet)
    return tweets"]
	0 -> 115
	116 [label="116
arguments
CK, CKS, AT, ATS, pages, user_name"]
	115 -> 116
	117 [label="117
arg
CK"]
	116 -> 117
	118 [label="118
arg
CKS"]
	116 -> 118
	119 [label="119
arg
AT"]
	116 -> 119
	120 [label="120
arg
ATS"]
	116 -> 120
	121 [label="121
arg
pages"]
	116 -> 121
	122 [label="122
arg
user_name"]
	116 -> 122
	123 [label="123
Assign
auth = tweepy.OAuthHandler(CK, CKS)"]
	115 -> 123
	124 [label="124
Name
auth"]
	123 -> 124
	125 [label="125
Store
"]
	124 -> 125
	126 [label="126
Call
tweepy.OAuthHandler(CK, CKS)"]
	123 -> 126
	127 [label="127
Attribute
tweepy.OAuthHandler"]
	126 -> 127
	128 [label="128
Name
tweepy"]
	127 -> 128
	129 [label="129
Load
"]
	128 -> 129
	130 [label="130
Load
"]
	127 -> 130
	131 [label="131
Name
CK"]
	126 -> 131
	132 [label="132
Load
"]
	131 -> 132
	133 [label="133
Name
CKS"]
	126 -> 133
	134 [label="134
Load
"]
	133 -> 134
	135 [label="135
Expr
auth.set_access_token(AT, ATS)"]
	115 -> 135
	136 [label="136
Call
auth.set_access_token(AT, ATS)"]
	135 -> 136
	137 [label="137
Attribute
auth.set_access_token"]
	136 -> 137
	138 [label="138
Name
auth"]
	137 -> 138
	139 [label="139
Load
"]
	138 -> 139
	140 [label="140
Load
"]
	137 -> 140
	141 [label="141
Name
AT"]
	136 -> 141
	142 [label="142
Load
"]
	141 -> 142
	143 [label="143
Name
ATS"]
	136 -> 143
	144 [label="144
Load
"]
	143 -> 144
	145 [label="145
Assign
api = tweepy.API(auth)"]
	115 -> 145
	146 [label="146
Name
api"]
	145 -> 146
	147 [label="147
Store
"]
	146 -> 147
	148 [label="148
Call
tweepy.API(auth)"]
	145 -> 148
	149 [label="149
Attribute
tweepy.API"]
	148 -> 149
	150 [label="150
Name
tweepy"]
	149 -> 150
	151 [label="151
Load
"]
	150 -> 151
	152 [label="152
Load
"]
	149 -> 152
	153 [label="153
Name
auth"]
	148 -> 153
	154 [label="154
Load
"]
	153 -> 154
	155 [label="155
Assign
tweets = []"]
	115 -> 155
	156 [label="156
Name
tweets"]
	155 -> 156
	157 [label="157
Store
"]
	156 -> 157
	158 [label="158
List
[]"]
	155 -> 158
	159 [label="159
Load
"]
	158 -> 159
	160 [label="160
For
for page in pages:
    results = api.user_timeline(screen_name=user_name, count=200, page=page)
    for tweet in results:
        tweet = tweet.text
        tweets.append(tweet)"]
	115 -> 160
	161 [label="161
Name
page"]
	160 -> 161
	162 [label="162
Store
"]
	161 -> 162
	163 [label="163
Name
pages"]
	160 -> 163
	164 [label="164
Load
"]
	163 -> 164
	165 [label="165
Assign
results = api.user_timeline(screen_name=user_name, count=200, page=page)"]
	160 -> 165
	166 [label="166
Name
results"]
	165 -> 166
	167 [label="167
Store
"]
	166 -> 167
	168 [label="168
Call
api.user_timeline(screen_name=user_name, count=200, page=page)"]
	165 -> 168
	169 [label="169
Attribute
api.user_timeline"]
	168 -> 169
	170 [label="170
Name
api"]
	169 -> 170
	171 [label="171
Load
"]
	170 -> 171
	172 [label="172
Load
"]
	169 -> 172
	173 [label="173
keyword
screen_name=user_name"]
	168 -> 173
	174 [label="174
Name
user_name"]
	173 -> 174
	175 [label="175
Load
"]
	174 -> 175
	176 [label="176
keyword
count=200"]
	168 -> 176
	177 [label="177
Constant
200"]
	176 -> 177
	178 [label="178
keyword
page=page"]
	168 -> 178
	179 [label="179
Name
page"]
	178 -> 179
	180 [label="180
Load
"]
	179 -> 180
	181 [label="181
For
for tweet in results:
    tweet = tweet.text
    tweets.append(tweet)"]
	160 -> 181
	182 [label="182
Name
tweet"]
	181 -> 182
	183 [label="183
Store
"]
	182 -> 183
	184 [label="184
Name
results"]
	181 -> 184
	185 [label="185
Load
"]
	184 -> 185
	186 [label="186
Assign
tweet = tweet.text"]
	181 -> 186
	187 [label="187
Name
tweet"]
	186 -> 187
	188 [label="188
Store
"]
	187 -> 188
	189 [label="189
Attribute
tweet.text"]
	186 -> 189
	190 [label="190
Name
tweet"]
	189 -> 190
	191 [label="191
Load
"]
	190 -> 191
	192 [label="192
Load
"]
	189 -> 192
	193 [label="193
Expr
tweets.append(tweet)"]
	181 -> 193
	194 [label="194
Call
tweets.append(tweet)"]
	193 -> 194
	195 [label="195
Attribute
tweets.append"]
	194 -> 195
	196 [label="196
Name
tweets"]
	195 -> 196
	197 [label="197
Load
"]
	196 -> 197
	198 [label="198
Load
"]
	195 -> 198
	199 [label="199
Name
tweet"]
	194 -> 199
	200 [label="200
Load
"]
	199 -> 200
	201 [label="201
Return
return tweets"]
	115 -> 201
	202 [label="202
Name
tweets"]
	201 -> 202
	203 [label="203
Load
"]
	202 -> 203
	204 [label="204
If
if __name__ == '__main__':
    main()"]
	0 -> 204
	205 [label="205
Compare
__name__ == '__main__'"]
	204 -> 205
	206 [label="206
Name
__name__"]
	205 -> 206
	207 [label="207
Load
"]
	206 -> 207
	208 [label="208
Eq
"]
	205 -> 208
	209 [label="209
Constant
'__main__'"]
	205 -> 209
	210 [label="210
Expr
main()"]
	204 -> 210
	211 [label="211
Call
main()"]
	210 -> 211
	212 [label="212
Name
main"]
	211 -> 212
	213 [label="213
Load
"]
	212 -> 213
}
